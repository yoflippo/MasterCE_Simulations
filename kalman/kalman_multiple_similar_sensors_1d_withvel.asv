function [] = kalman_multiple_similar_sensors_1d_withvel()

[dt,t,n,signals,velocity] = KF_INPUT_DATA()

X = zeros(2,1);% state matrix
P = zeros(2,2);% covariance matrix
X_arr = zeros(n, 2);% kalman filter output through the whole time

Q = [0.1 0;% system noise
    0 1]*1;
F = [1 dt;% transition matrix
    0 1];
H = [1 0; 
    0 1];% observation matrix

% fusion
for i = 1:n
    if (i == 1)
        [X, P] = init_kalman(X, signals(1).sig(i, 1)); % initialize the state using the 1st sensor
    else
        [X, P] = prediction(X, P, Q, F);
        [X, P] = update(X, P, [s1(i, 1) v1(i,1)], [s1(i, 2) 0; 0 v1(i,2)], H);
    end
    X_arr(i, :) = X(1,:);
end

plot(t, position, 'LineWidth', 2);
hold on;
plot(t, s1(:, 1), '--', 'LineWidth', 1);
plot(t, X_arr(:, 1), 'LineWidth', 2);
title(num2str(round(rmse(X_arr(:,1)-position),3)))
hold off;
grid on;
legend('Ground Truth', 'Sensor Input 1', 'Sensor Input 2', 'Sensor Input 3', 'Sensor Input 4', 'Fused Output');
end




function [X, P] = init_kalman(X, y)
X(1,1) = y;
X(2,1) = 0;

P = [10 0;
    0   30];
end

function [X, P] = prediction(X, P, Q, F)
X = F*X;
P = F*P*F' + Q;
end

function [X, P] = update(X, P, y, R, H)
Inn = y' - H*X;
S = H*P*H' + R;
K = P*H'*inv(S);

X = X + K*Inn;
P = P - K*H*P;
% P = (eye(size(P))-K*H)*P*(eye(size(P))-K*H)' + K*R*K'; %joseph equation
end